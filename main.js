'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var ExpanderPlugin = /** @class */ (function (_super) {
    __extends(ExpanderPlugin, _super);
    function ExpanderPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleKeyDown = function (cm, event) {
            if (!_this.listening) {
                if (event.key == ':') {
                    //see if this is the second :
                    var cursor = cm.getCursor();
                    var line = cursor.line;
                    var lineString = cm.getLine(line);
                    var previousPosition = { ch: cursor.ch - 1, line: cursor.line, sticky: 'yes' };
                    var range = cm.getRange(previousPosition, cursor);
                    console.log(range.charAt(0));
                    if ([':'].contains(range.charAt(0))) {
                        _this.listening = true;
                        _this.statusBar.setText("I'm listening...");
                    }
                }
            }
            else if (event.key == 'Enter') {
                var cursor = cm.getCursor();
                var line_1 = cursor.line;
                var lineString_1 = cm.getLine(line_1);
                var patterns = new Map();
                // default triggers
                patterns.set("::date", new Date().toDateString());
                //custom triggers
                console.log("adding custom keywords");
                if (_this.settings.triggerOneKeyword) {
                    patterns.set("::" + _this.settings.triggerOneKeyword, _this.settings.triggerOneValue);
                }
                if (_this.settings.triggerTwoKeyword) {
                    patterns.set("::" + _this.settings.triggerTwoKeyword, _this.settings.triggerTwoValue);
                }
                patterns.forEach(function (value, key) {
                    var pattern = key;
                    var regex = RegExp(pattern);
                    if (regex.test(lineString_1)) {
                        var patternMatchIndex = lineString_1.match(pattern).index;
                        var patternLength = pattern.length;
                        cm.replaceRange(value, { ch: patternMatchIndex, line: line_1 }, { ch: patternMatchIndex + patternLength, line: line_1 });
                    }
                });
                _this.listening = false;
                _this.statusBar.setText("");
            }
        };
        return _this;
    }
    ExpanderPlugin.prototype.onload = function () {
        var _this = this;
        this.loadSettings();
        this.addSettingTab(new ExpanderSettingTab(this.app, this));
        this.statusBar = this.addStatusBarItem();
        this.cmEditors = [];
        this.registerEvent(this.app.on('codemirror', function (cm) {
            _this.cmEditors.push(cm);
            cm.on('keydown', _this.handleKeyDown);
        }));
    };
    ExpanderPlugin.prototype.onunload = function () {
        var _this = this;
        console.log('unloading plugin');
        this.cmEditors.forEach(function (cm) {
            cm.off('keydown', _this.handleKeyDown);
        });
    };
    ExpanderPlugin.prototype.loadSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.settings = new ExpanderPluginSettings();
                (function () { return __awaiter(_this, void 0, void 0, function () {
                    var loadedSettings;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.loadData()];
                            case 1:
                                loadedSettings = _a.sent();
                                if (loadedSettings) {
                                    console.log('Found existing settings file');
                                    this.settings.triggerOneKeyword = loadedSettings.triggerOneKeyword;
                                    this.settings.triggerOneValue = loadedSettings.triggerOneValue;
                                }
                                else {
                                    console.log('No settings file found, saving...');
                                    this.saveData(this.settings);
                                }
                                return [2 /*return*/];
                        }
                    });
                }); })();
                return [2 /*return*/];
            });
        });
    };
    return ExpanderPlugin;
}(obsidian.Plugin));
var ExpanderPluginSettings = /** @class */ (function () {
    function ExpanderPluginSettings() {
    }
    return ExpanderPluginSettings;
}());
var ExpanderSettingTab = /** @class */ (function (_super) {
    __extends(ExpanderSettingTab, _super);
    function ExpanderSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    ExpanderSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Expander Plugin - Custom Keywords' });
        new obsidian.Setting(containerEl)
            .setName('Trigger #1 Keyword')
            .setDesc('foo -> ::foo')
            .addText(function (text) { return text.setPlaceholder('foo')
            .setValue(_this.plugin.settings.triggerOneKeyword)
            .onChange(function (value) {
            _this.plugin.settings.triggerOneKeyword = value;
            _this.plugin.saveData(_this.plugin.settings);
        }); });
        new obsidian.Setting(containerEl)
            .setName('Trigger #1 Replacement')
            .setDesc('What trigger keyword #1 should expand to')
            .addTextArea(function (text) { return text.setPlaceholder('')
            .setValue(_this.plugin.settings.triggerOneValue)
            .onChange(function (value) {
            _this.plugin.settings.triggerOneValue = value;
            _this.plugin.saveData(_this.plugin.settings);
        }); });
    };
    return ExpanderSettingTab;
}(obsidian.PluginSettingTab));

module.exports = ExpanderPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
